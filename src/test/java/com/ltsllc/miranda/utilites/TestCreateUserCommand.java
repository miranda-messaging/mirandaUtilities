package com.ltsllc.miranda.utilites;

import com.ltsllc.common.util.Utils;
import com.ltsllc.miranda.clientinterface.basicclasses.User;
import com.ltsllc.miranda.test.TestCase;
import com.ltsllc.common.commadline.CommandException;
import com.ltsllc.miranda.utilities.CreateUserCommand;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;

/**
 * Created by ltsllc on 7/9/2017.
 */
public class TestCreateUserCommand extends TestCase {
    private CreateUserCommand createUserCommand;

    public CreateUserCommand getCreateUserCommand() {
        return createUserCommand;
    }

    public void setCreateUserCommand(CreateUserCommand createUserCommand) {
        this.createUserCommand = createUserCommand;
    }

    @Before
    public void setup () {
        CreateUserCommand createUserCommand = new CreateUserCommand();
        setCreateUserCommand(createUserCommand);
    }


    @After
    public void ceanup () {
        deleteDirectory(TEST_DIRECTORY);
    }


    @Test
    public void testCreateKeyPair () throws Exception {
        createDirectory(TEST_DIRECTORY);
        getCreateUserCommand().setDirectory(TEST_DIRECTORY);
        KeyPair keyPair = getCreateUserCommand().createKeyPair(TEST_USER_NAME);

        assert (null != keyPair);
        assert (null != keyPair.getPrivate());
        assert (null != keyPair.getPublic());

        String filename = getCreateUserCommand().getPublicKeyFilenameFor(TEST_USER_NAME);
        File file = new File(filename);
        assert (file.exists());

        filename = getCreateUserCommand().getPrivateKeyFilenameFor(TEST_USER_NAME);
        file = new File(filename);
        assert (file.exists());
    }

    public static final String TEST_USER_NAME = "test";
    public static final String TEST_PUBLIC_KEY_FILENAME = "test/test.public.pem";

    public static final String

    @Test
    public void testLoadPublicKey () throws IOException {
        createDirectory(TEST_DIRECTORY);
        getCreateUserCommand().setDirectory(TEST_DIRECTORY);
        createFile(TEST_PUBLIC_KEY_FILENAME, PUBLIC_KEY);
        pause(100);
        PublicKey publicKey = getCreateUserCommand().loadPublicKey(TEST_USER_NAME);
        assert (null != publicKey);
    }

    public static final String
    public static final String TEST_PRIVATE_KEY_FILENAME = "test/test.private.pem";

    @Test
    public void testLoadPrivateKey () throws Exception {
        createDirectory(TEST_DIRECTORY);
        getCreateUserCommand().setDirectory(TEST_DIRECTORY);
        createFile(TEST_PRIVATE_KEY_FILENAME, PRIVATE_KEY);
        pause(100);
        PrivateKey privateKey = getCreateUserCommand().loadPrivateKey(TEST_USER_NAME);
        assert (null != privateKey);
    }

    public static final String TEST_KEYSTORE_FILENAME = "test/keystore";
    public static final String TEST_KEYSTORE_PASSWORD = "whatever";
    public static final String TEST_USER_FILE_FILENAME = "test/users.json";

    @Test
    public void testGoSuccess () throws Exception {
        createTestFiles();
        getCreateUserCommand().setDirectory(TEST_DIRECTORY);
        getCreateUserCommand().setKeystoreFilename(TEST_KEYSTORE_FILENAME);
        getCreateUserCommand().setKeystorePasswod(TEST_KEYSTORE_PASSWORD);
        getCreateUserCommand().setPublicKeyFilename(TEST_PUBLIC_KEY_FILENAME);
        getCreateUserCommand().setUserDescription("a test");
        getCreateUserCommand().setUserFileFilename(TEST_USER_FILE_FILENAME);
        getCreateUserCommand().setUserName(TEST_USER_NAME);
        getCreateUserCommand().setUserType(User.UserTypes.Publisher);

        getCreateUserCommand().go();

        KeyStore keyStore = Utils.loadKeyStore(TEST_KEYSTORE_FILENAME, TEST_KEYSTORE_PASSWORD);
        PrivateKey jsPrivateKey = (PrivateKey) keyStore.getKey("private", TEST_KEYSTORE_PASSWORD.toCharArray());
        com.ltsllc.miranda.clientinterface.basicclasses.PrivateKey privateKey = new com.ltsllc.miranda.clientinterface.basicclasses.PrivateKey(jsPrivateKey);
        UsersFileTest usersFileTest = new UsersFileTest(TEST_USER_FILE_FILENAME, TEST_KEYSTORE_FILENAME, TEST_KEYSTORE_PASSWORD);
        usersFileTest.load();
        assert (usersFileTest.contains (TEST_USER_NAME));
    }

    public static final String
    public static final String USERS_FILE = "7B226B6579223A224238444246363742323333343931303635374536463332373731444538364231443831363838423432303433383132383833303444373041373439323245453231324344354542363941394334454233444532344231344235464543393343383431363843333942323544453338413034454332313335454334303439434130344246304634344642453833374446443837443730303435364134363542344634333637333330343941353544383044314331463346394442323546343946314146324536373033303843413134363546433734324436453335413932453843434342353837313832394535354130313937434635454236444331384130443037443545363741384638373237383142344238354545364645414634364237394637303242334543383144373746433434394132463839343544323045333143394142454646364431333444464236434433393332333531433230344543363043454543353039354436363332463045413335324331433637423045363746434146353141433031393836454436343643373333313438383831444435433745383735414644334437383334394242303645454232333146364646373035303637353746353934333933423830313943343739413642424339463445373839303646443043383842353241323332433746443546384132343832353933363434222C226D657373616765223A2237343637453246463233454439433043324433423942304136413137444134364435393438443536303239333434324637363030303639373934413642313737433346423038374337333544444533313946354336464639334538364533303137433644373931343338303442423233393232394145313544424335444439373442413542343441374431413532313045344135383031423938423542354232423131434642343635433834343136383331304638433445343533303739454438453830304232443132353644393742363931333446343637433636453646384636343133313133394641313630393642393538373538414343393946354537333136304236364630363839344635433037423746463939423630373145324539374131424346443530334235463535333138324330303438463743364644363941454336313345453036323939323839303331413244393342433136443334393638374442363330433337414441363430323038303241464333343934463230424434433134363037374141303435384431433442413841453934454545453332374538443334413942453236353535434239303546413333394243373743313544423831383346423537364531384631443545394338453039334332463342384645374443433936373236364241413236384335433234324636313734434642343044313846343435323033384241443137304537463038384342354245364231414242314643464330374233464230423345444535334338433141373238353744373031393743333337434136344343463243463141413244463841304242303145333141423142363234463733383132453239423631383238463136444145424438443443383433323831303939444238453738324435413739424532334334433833344233394233324331343634454433384638323933303434303737353642333838333642443744323936443843423531453041323432314635393146374532313437384143303639434346313235373441413238334441423734453838434638423545384134423842354246453344384143363845444543314243303831373530374133434543333644414238384137393235324142443939334532444534423642373045343930334239344632384142333644423341464636344544344542384232343537303446354434323844413142463243373531423141433831444236443237463234313533384437413443323242423142313738323038313337314139333138323042313941303138384430364441344441453534353339414539433446413737443144423041343645423738324436443244393133394345454638323344443537354441323138344334423142363642324639373944414333413633444236323546443643453035463633354538454634434333313531303939423632423535343044374633353837394437313137373035363845383030423244313235364439374236393133344634363743363645364638333436434132413739423446393039314644384539333630373735373530393137383541343837464242443441343737323832373943314537423138424646344337443933414137363546463837373743313346304237343831353742424443227D";
    public static final String TEST_DIRECTORY = "test";


    public void createTestFiles () throws Exception {
        createDirectory(TEST_DIRECTORY);
        createFile(TEST_USER_FILE_FILENAME, USERS_FILE);
        createFile(TEST_KEYSTORE_FILENAME, KEYSTORE);
        createFile(TEST_PUBLIC_KEY_FILENAME, PUBLIC_KEY);
        createFile(TEST_PRIVATE_KEY_FILENAME, PRIVATE_KEY);
    }

    public void setupTest () throws Exception {
        createTestFiles();

        getCreateUserCommand().setDirectory(TEST_DIRECTORY);
        getCreateUserCommand().setKeystoreFilename(TEST_KEYSTORE_FILENAME);
        getCreateUserCommand().setKeystorePasswod(TEST_KEYSTORE_PASSWORD);
        getCreateUserCommand().setPublicKeyFilename(TEST_PUBLIC_KEY_FILENAME);
        getCreateUserCommand().setUserDescription("a test");
        getCreateUserCommand().setUserFileFilename(TEST_USER_FILE_FILENAME);
        getCreateUserCommand().setUserName(TEST_USER_NAME);
        getCreateUserCommand().setUserType(User.UserTypes.Publisher);
    }

    @Test
    public void testGoNoKeystore () throws Exception {
        setupTest();

        getCreateUserCommand().setKeystoreFilename("wrong");

        doFailureTest();
    }

    public void doFailureTest () throws Exception {
        CommandException e = null;

        try {
            getCreateUserCommand().go();
        } catch (CommandException ce) {
            e = ce;
        }

        assert (e != null);

        UsersFileTest usersFileTest = new UsersFileTest(TEST_USER_FILE_FILENAME, TEST_KEYSTORE_FILENAME, TEST_KEYSTORE_PASSWORD);
        assert (!usersFileTest.contains(TEST_USER_NAME));
    }

    @Test
    public void testGoWrongPassword () throws Exception {
        setupTest();

        getCreateUserCommand().setKeystorePasswod("wrong");

        doFailureTest();
    }

    @Test
    public void testGoInvalidUserType () throws Exception {
        setupTest();

        getCreateUserCommand().setUserType(User.UserTypes.Unknown);

        doFailureTest();
    }

    @Test
    public void testNullDirectory () throws Exception {
        setupTest();

        getCreateUserCommand().setDirectory(null);

        doFailureTest();
    }

    @Test
    public void testNeedToCreateKeyPair () {
        getCreateUserCommand().setDirectory(TEST_DIRECTORY);

        //
        // neither the public or private key exists --- we need to create a key pair
        //
        deleteDirectory(TEST_DIRECTORY);
        assert (getCreateUserCommand().needToCreateKeyPair(TEST_USER_NAME));

        //
        // the private key file is missing --- we need to create a key pair
        //
        createDirectory(TEST_DIRECTORY);
        createFile(TEST_PUBLIC_KEY_FILENAME, PUBLIC_KEY);

        assert (getCreateUserCommand().needToCreateKeyPair(TEST_USER_NAME));

        //
        // the private key file is missing --- we need to create a key pair
        //
        deleteFile(TEST_PUBLIC_KEY_FILENAME);
        createFile(TEST_PRIVATE_KEY_FILENAME, PRIVATE_KEY);

        assert (getCreateUserCommand().needToCreateKeyPair(TEST_USER_NAME));

        //
        // the public & private key files are present --- we don't need to create a key pair
        //
        createFile(TEST_PUBLIC_KEY_FILENAME, PUBLIC_KEY);

        assert (!getCreateUserCommand().needToCreateKeyPair(TEST_USER_NAME));
    }

    public static final User.UserTypes TEST_USER_TYPE = User.UserTypes.Publisher;
    public static final String TEST_USER_DESCRIPTION = "a test user";

    @Test
    public void testCreateUser () throws Exception {
        createDirectory(TEST_DIRECTORY);
        getCreateUserCommand().setDirectory(TEST_DIRECTORY);
        createFile(TEST_PUBLIC_KEY_FILENAME, PUBLIC_KEY);
        java.security.PublicKey jsPublicKey = getCreateUserCommand().loadPublicKey(TEST_USER_NAME);
        com.ltsllc.miranda.clientinterface.basicclasses.PublicKey publicKey =
                new com.ltsllc.miranda.clientinterface.basicclasses.PublicKey(jsPublicKey);

        User user = getCreateUserCommand().createUser(TEST_USER_NAME, TEST_USER_TYPE, TEST_USER_DESCRIPTION, publicKey);

        assert (user.getName().equals(TEST_USER_NAME));
        assert (user.getCategory() == User.UserTypes.Publisher);
        assert (user.getDescription().equals(TEST_USER_DESCRIPTION));
        assert (user.getPublicKey() == publicKey);
    }

    public void performCheckFailure () {
        CommandException ce = null;

        try {
            getCreateUserCommand().check();
        } catch (CommandException e) {
            ce = e;
        }

        assert (ce != null);
    }

    @Test
    public void testCheck () {
        //
        // null directory
        //
        performCheckFailure();

        //
        // directory does not exist
        //
        getCreateUserCommand().setDirectory("does not exist");
        performCheckFailure();

        //
        // directory is not a directory
        //
        createDirectory(TEST_DIRECTORY);
        createFile(TEST_PUBLIC_KEY_FILENAME, PUBLIC_KEY);
        getCreateUserCommand().setDirectory(TEST_PUBLIC_KEY_FILENAME);
        performCheckFailure();

        getCreateUserCommand().setDirectory(TEST_DIRECTORY);

        //
        // null keystore
        //
        performCheckFailure();

        //
        // keystore does not exist
        //
        getCreateUserCommand().setPublicKeyFilename("does not exist");
        performCheckFailure();

        getCreateUserCommand().setKeystoreFilename(TEST_KEYSTORE_FILENAME);
        createFile(TEST_KEYSTORE_FILENAME, KEYSTORE);

        //
        // null user name
        //
        performCheckFailure();

        getCreateUserCommand().setUserName(TEST_USER_NAME);

        //
        // invalid user type
        //
        getCreateUserCommand().setUserType(User.UserTypes.Unknown);
        performCheckFailure();

        getCreateUserCommand().setUserType(User.UserTypes.Publisher);

        //
        // null users file
        //
        performCheckFailure();

        //
        // users file does not exist
        //
        getCreateUserCommand().setUserFileFilename("does not exist");
        performCheckFailure();

        createFile(TEST_USER_FILE_FILENAME, USERS_FILE);
        getCreateUserCommand().setUserFileFilename(TEST_USER_FILE_FILENAME);

        //
        // success
        //
        CommandException ce = null;

        try {
            getCreateUserCommand().check();
        } catch (CommandException e) {
            ce = e;
        }

        assert (ce == null);
    }

}
